import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.scss";
import {
  DeleteTodo,
  GetTodos,
  GetTodosPaginated,
  UpdateTodo,
} from "@/services/todos";
import { Box, Button, Checkbox, Icon, Pagination } from "@mui/material";
import TodoForm from "@/components/todo-form";
import { TODO_PAGE_SIZE, Todo, TodoConnection } from "@/services/todos/models";
import { useState } from "react";
import ClearIcon from "@mui/icons-material/Clear";
import { toast } from "react-toastify";

const inter = Inter({ subsets: ["latin"] });

type Props = {
  todosConnection: TodoConnection;
};
export default function Home({ todosConnection }: Props) {
  const [todos, setTodos] = useState(todosConnection);
  async function onGetTodos(newPage: number) {
    const newTodos = await GetTodosPaginated(TODO_PAGE_SIZE, newPage);
    setTodos(newTodos);
    console.log(newTodos);
  }

  async function onUpdateTodo(id: string, done: boolean) {
    await UpdateTodo(id, done);
    const newTodos = await GetTodosPaginated(
      TODO_PAGE_SIZE,
      todos.pageInfo.currentPage
    );
    setTodos(newTodos);
  }

  async function onDeleteTodo(id: string) {
    await DeleteTodo(id);
    const newTodos = await GetTodosPaginated(TODO_PAGE_SIZE, 1);
    setTodos(newTodos);
    toast.success("Todo deleted");
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={`${styles.main} ${inter.className}`}>
        {todos?.edges.map((todo) => {
          return (
            <Box key={todo.id} className={styles.todoItem}>
              <Checkbox
                checked={todo.done}
                onChange={() => onUpdateTodo(todo.id, !todo.done)}
              />{" "}
              {todo.text} <ClearIcon onClick={() => onDeleteTodo(todo.id)} />
            </Box>
          );
        })}
        <Pagination
          page={todos.pageInfo.currentPage}
          count={todos.pageInfo.totalPages}
          onChange={(event, newPage) => onGetTodos(newPage)}
        />
        <TodoForm onCreateTodo={() => onGetTodos(1)} />
      </main>
    </>
  );
}

export async function getServerSideProps() {
  const todosConnection = await GetTodosPaginated(TODO_PAGE_SIZE, 1);
  return {
    props: {
      todosConnection,
    },
  };
}
