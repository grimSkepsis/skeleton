import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.scss";
import {
  DeleteTodo,
  GetTodoStats,
  GetTodos,
  GetTodosPaginated,
  UpdateTodo,
} from "@/services/todos";
import {
  Box,
  Button,
  Checkbox,
  Icon,
  Pagination,
  Typography,
} from "@mui/material";
import TodoForm from "@/components/todo-form";
import {
  TODO_PAGE_SIZE,
  Todo,
  TodoConnection,
  TodoStats,
} from "@/services/todos/models";
import { useState } from "react";
import ClearIcon from "@mui/icons-material/Clear";
import { toast } from "react-toastify";

const inter = Inter({ subsets: ["latin"] });

type Props = {
  todosConnection: TodoConnection;
  todoStats: TodoStats;
};
export default function Home({ todosConnection, todoStats }: Props) {
  const [todos, setTodos] = useState(todosConnection);
  const [currTodoStats, setCurrTodoStats] = useState(todoStats);
  async function onGetTodos(newPage: number) {
    const newTodos = await GetTodosPaginated(TODO_PAGE_SIZE, newPage);
    setTodos(newTodos);
    await refreshStats();
  }

  async function onUpdateTodo(id: string, done: boolean) {
    await UpdateTodo(id, done);
    const newTodos = await GetTodosPaginated(
      TODO_PAGE_SIZE,
      todos.pageInfo.currentPage
    );
    setTodos(newTodos);

    await refreshStats();
  }

  async function onDeleteTodo(id: string) {
    await DeleteTodo(id);
    const newTodos = await GetTodosPaginated(TODO_PAGE_SIZE, 1);
    setTodos(newTodos);

    await refreshStats();
  }

  async function refreshStats() {
    const newTodoStats = await GetTodoStats();
    setCurrTodoStats(newTodoStats);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>âˆ‚
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={`${styles.main} ${inter.className}`}>
        <Typography fontSize={30}>Todo list</Typography>
        <Typography fontSize={16}>Total: {currTodoStats.total}</Typography>
        <Typography fontSize={16}>
          List summary: {currTodoStats.aggregateText}
        </Typography>
        <Typography fontSize={16}>
          Total Completed: {currTodoStats.totalCompleted}
        </Typography>
        <div className={styles.todoContainer}>
          {todos.pageInfo.total > 0 ? (
            todos?.edges.map((todo) => {
              return (
                <Box key={todo.id} className={styles.todoItem}>
                  <div>
                    <Checkbox
                      checked={todo.done}
                      onChange={() => onUpdateTodo(todo.id, !todo.done)}
                    />{" "}
                    {todo.text}
                  </div>
                  <ClearIcon onClick={() => onDeleteTodo(todo.id)} />
                </Box>
              );
            })
          ) : (
            <div className={styles.todosPlaceholder}>
              <Typography fontSize={24}>No todos yet.</Typography>
              <Typography fontSize={16}>Add some to get started.</Typography>
            </div>
          )}
        </div>

        {todos && todos.pageInfo.total > 0 && (
          <Pagination
            page={todos.pageInfo.currentPage}
            count={todos.pageInfo.totalPages}
            onChange={(event, newPage) => onGetTodos(newPage)}
          />
        )}
        <TodoForm onCreateTodo={() => onGetTodos(1)} />
      </main>
    </>
  );
}

export async function getServerSideProps() {
  const todosConnection = await GetTodosPaginated(TODO_PAGE_SIZE, 1);
  const todoStats = await GetTodoStats();
  return {
    props: {
      todosConnection,
      todoStats,
    },
  };
}
